// auto-generated by x2clr xpiler

using System;
using System.Collections.Generic;
using System.Text;

using x2;

namespace Events.Instance
{
    public class Member : Cell
    {
        protected new static readonly Tag tag;

        private string account_;
        private int guid_;

        public string Account
        {
            get { return account_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                account_ = value;
            }
        }

        public int Guid
        {
            get { return guid_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                guid_ = value;
            }
        }

        static Member()
        {
            tag = new Tag(null, typeof(Member), 2);
        }

        public Member()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected Member(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            Member o = (Member)other;
            if (account_ != o.account_)
            {
                return false;
            }
            if (guid_ != o.guid_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(account_);
            }
            if (touched[1])
            {
                hash.Update(tag.Offset + 1);
                hash.Update(guid_);
            }
            return hash.Code;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            Member o = (Member)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (account_ != o.account_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (guid_ != o.guid_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out account_);
            }
            if (touched[1])
            {
                deserializer.Read(out guid_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Account", out account_);
            deserializer.Read("Guid", out guid_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(account_);
            }
            if (touched[1])
            {
                serializer.Write(guid_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Account", account_);
            serializer.Write("Guid", guid_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(account_);
            }
            if (touched[1])
            {
                length += Serializer.GetLength(guid_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Account=\"{0}\"", account_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Guid={0}", guid_);
        }

        private void Initialize()
        {
            account_ = "";
            guid_ = 0;
        }
    }

    public class EventBase : Event
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private int world_;
        private Member requester_;
        private int id_;

        public int World
        {
            get { return world_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                world_ = value;
            }
        }

        public Member Requester
        {
            get { return requester_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                requester_ = value;
            }
        }

        public int Id
        {
            get { return id_; }
            set
            {
                fingerprint.Touch(tag.Offset + 2);
                id_ = value;
            }
        }

        static EventBase()
        {
            tag = new Tag(Event.tag, typeof(EventBase), 3,
                    (int)EventInstanceTypes.Base);
        }

        public new static EventBase New()
        {
            return new EventBase();
        }

        public EventBase()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventBase(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventBase o = (EventBase)other;
            if (world_ != o.world_)
            {
                return false;
            }
            if (requester_ != o.requester_)
            {
                return false;
            }
            if (id_ != o.id_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(world_);
            }
            if (touched[1])
            {
                hash.Update(tag.Offset + 1);
                hash.Update(requester_);
            }
            if (touched[2])
            {
                hash.Update(tag.Offset + 2);
                hash.Update(id_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventBase.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventBase o = (EventBase)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (world_ != o.world_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (requester_ != o.requester_)
                {
                    return false;
                }
            }
            if (touched[2])
            {
                if (id_ != o.id_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out world_);
            }
            if (touched[1])
            {
                deserializer.Read(out requester_);
            }
            if (touched[2])
            {
                deserializer.Read(out id_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("World", out world_);
            deserializer.Read("Requester", out requester_);
            deserializer.Read("Id", out id_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(world_);
            }
            if (touched[1])
            {
                serializer.Write(requester_);
            }
            if (touched[2])
            {
                serializer.Write(id_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("World", world_);
            serializer.Write("Requester", requester_);
            serializer.Write("Id", id_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(world_);
            }
            if (touched[1])
            {
                length += Serializer.GetLength(requester_);
            }
            if (touched[2])
            {
                length += Serializer.GetLength(id_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" World={0}", world_);
            stringBuilder.AppendFormat(" Requester={0}", requester_);
            stringBuilder.AppendFormat(" Id={0}", id_);
        }

        private void Initialize()
        {
            world_ = 0;
            requester_ = null;
            id_ = 0;
        }
    }

    public class EventCreateReq : EventBase
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        static EventCreateReq()
        {
            tag = new Tag(EventBase.tag, typeof(EventCreateReq), 0,
                    (int)EventInstanceTypes.CreateReq);
        }

        public new static EventCreateReq New()
        {
            return new EventCreateReq();
        }

        public EventCreateReq()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventCreateReq(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventCreateReq.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
        }

        private void Initialize()
        {
        }
    }

    public class EventCreateResp : EventBase
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private int result_;

        public int Result
        {
            get { return result_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                result_ = value;
            }
        }

        static EventCreateResp()
        {
            tag = new Tag(EventBase.tag, typeof(EventCreateResp), 1,
                    (int)EventInstanceTypes.CreateResp);
        }

        public new static EventCreateResp New()
        {
            return new EventCreateResp();
        }

        public EventCreateResp()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventCreateResp(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventCreateResp o = (EventCreateResp)other;
            if (result_ != o.result_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(result_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventCreateResp.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventCreateResp o = (EventCreateResp)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (result_ != o.result_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out result_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Result", out result_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(result_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Result", result_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(result_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Result={0}", result_);
        }

        private void Initialize()
        {
            result_ = 0;
        }
    }

    public class EventJoinReq : EventBase
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        static EventJoinReq()
        {
            tag = new Tag(EventBase.tag, typeof(EventJoinReq), 0,
                    (int)EventInstanceTypes.JoinReq);
        }

        public new static EventJoinReq New()
        {
            return new EventJoinReq();
        }

        public EventJoinReq()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventJoinReq(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventJoinReq.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
        }

        private void Initialize()
        {
        }
    }

    public class EventJoinResp : EventBase
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private int result_;
        private List<Member> members_;

        public int Result
        {
            get { return result_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                result_ = value;
            }
        }

        public List<Member> Members
        {
            get { return members_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                members_ = value;
            }
        }

        static EventJoinResp()
        {
            tag = new Tag(EventBase.tag, typeof(EventJoinResp), 2,
                    (int)EventInstanceTypes.JoinResp);
        }

        public new static EventJoinResp New()
        {
            return new EventJoinResp();
        }

        public EventJoinResp()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventJoinResp(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventJoinResp o = (EventJoinResp)other;
            if (result_ != o.result_)
            {
                return false;
            }
            if (!Extensions.EqualsExtended(members_, o.members_))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(result_);
            }
            if (touched[1])
            {
                hash.Update(tag.Offset + 1);
                hash.Update(members_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventJoinResp.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventJoinResp o = (EventJoinResp)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (result_ != o.result_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (members_ != o.members_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out result_);
            }
            if (touched[1])
            {
                deserializer.Read(out members_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Result", out result_);
            deserializer.Read("Members", out members_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(result_);
            }
            if (touched[1])
            {
                serializer.Write(members_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Result", result_);
            serializer.Write("Members", members_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(result_);
            }
            if (touched[1])
            {
                length += Serializer.GetLength(members_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Result={0}", result_);
            stringBuilder.AppendFormat(" Members={0}", members_.ToStringExtended());
        }

        private void Initialize()
        {
            result_ = 0;
            members_ = null;
        }
    }

    public class EventLeaveReq : EventBase
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        static EventLeaveReq()
        {
            tag = new Tag(EventBase.tag, typeof(EventLeaveReq), 0,
                    (int)EventInstanceTypes.LeaveReq);
        }

        public new static EventLeaveReq New()
        {
            return new EventLeaveReq();
        }

        public EventLeaveReq()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventLeaveReq(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventLeaveReq.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
        }

        private void Initialize()
        {
        }
    }

    public class EventLeaveResp : EventBase
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private int result_;

        public int Result
        {
            get { return result_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                result_ = value;
            }
        }

        static EventLeaveResp()
        {
            tag = new Tag(EventBase.tag, typeof(EventLeaveResp), 1,
                    (int)EventInstanceTypes.LeaveResp);
        }

        public new static EventLeaveResp New()
        {
            return new EventLeaveResp();
        }

        public EventLeaveResp()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventLeaveResp(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventLeaveResp o = (EventLeaveResp)other;
            if (result_ != o.result_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(result_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventLeaveResp.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventLeaveResp o = (EventLeaveResp)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (result_ != o.result_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out result_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Result", out result_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(result_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Result", result_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(result_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Result={0}", result_);
        }

        private void Initialize()
        {
            result_ = 0;
        }
    }

    public class EventStatus : EventBase
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private int status_;
        private List<Member> members_;

        public int Status
        {
            get { return status_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                status_ = value;
            }
        }

        public List<Member> Members
        {
            get { return members_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                members_ = value;
            }
        }

        static EventStatus()
        {
            tag = new Tag(EventBase.tag, typeof(EventStatus), 2,
                    (int)EventInstanceTypes.Status);
        }

        public new static EventStatus New()
        {
            return new EventStatus();
        }

        public EventStatus()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventStatus(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventStatus o = (EventStatus)other;
            if (status_ != o.status_)
            {
                return false;
            }
            if (!Extensions.EqualsExtended(members_, o.members_))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(status_);
            }
            if (touched[1])
            {
                hash.Update(tag.Offset + 1);
                hash.Update(members_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventStatus.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventStatus o = (EventStatus)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (status_ != o.status_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (members_ != o.members_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out status_);
            }
            if (touched[1])
            {
                deserializer.Read(out members_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Status", out status_);
            deserializer.Read("Members", out members_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(status_);
            }
            if (touched[1])
            {
                serializer.Write(members_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Status", status_);
            serializer.Write("Members", members_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(status_);
            }
            if (touched[1])
            {
                length += Serializer.GetLength(members_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Status={0}", status_);
            stringBuilder.AppendFormat(" Members={0}", members_.ToStringExtended());
        }

        private void Initialize()
        {
            status_ = 0;
            members_ = null;
        }
    }

    public class EventRunnerStatus : Event
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private string name_;
        private int status_;
        private int count_;

        public string Name
        {
            get { return name_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                name_ = value;
            }
        }

        public int Status
        {
            get { return status_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                status_ = value;
            }
        }

        public int Count
        {
            get { return count_; }
            set
            {
                fingerprint.Touch(tag.Offset + 2);
                count_ = value;
            }
        }

        static EventRunnerStatus()
        {
            tag = new Tag(Event.tag, typeof(EventRunnerStatus), 3,
                    (int)EventInstanceTypes.RunnerStatus);
        }

        public new static EventRunnerStatus New()
        {
            return new EventRunnerStatus();
        }

        public EventRunnerStatus()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventRunnerStatus(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventRunnerStatus o = (EventRunnerStatus)other;
            if (name_ != o.name_)
            {
                return false;
            }
            if (status_ != o.status_)
            {
                return false;
            }
            if (count_ != o.count_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(name_);
            }
            if (touched[1])
            {
                hash.Update(tag.Offset + 1);
                hash.Update(status_);
            }
            if (touched[2])
            {
                hash.Update(tag.Offset + 2);
                hash.Update(count_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventRunnerStatus.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventRunnerStatus o = (EventRunnerStatus)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (name_ != o.name_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (status_ != o.status_)
                {
                    return false;
                }
            }
            if (touched[2])
            {
                if (count_ != o.count_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out name_);
            }
            if (touched[1])
            {
                deserializer.Read(out status_);
            }
            if (touched[2])
            {
                deserializer.Read(out count_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Name", out name_);
            deserializer.Read("Status", out status_);
            deserializer.Read("Count", out count_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(name_);
            }
            if (touched[1])
            {
                serializer.Write(status_);
            }
            if (touched[2])
            {
                serializer.Write(count_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Name", name_);
            serializer.Write("Status", status_);
            serializer.Write("Count", count_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(name_);
            }
            if (touched[1])
            {
                length += Serializer.GetLength(status_);
            }
            if (touched[2])
            {
                length += Serializer.GetLength(count_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Name=\"{0}\"", name_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Status={0}", status_);
            stringBuilder.AppendFormat(" Count={0}", count_);
        }

        private void Initialize()
        {
            name_ = "";
            status_ = 0;
            count_ = 0;
        }
    }
}
