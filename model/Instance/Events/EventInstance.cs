// auto-generated by x2clr xpiler

using System;
using System.Collections.Generic;
using System.Text;

using x2;

namespace Events.Instance
{
    public class Member : Cell
    {
        protected new static readonly Tag tag;

        private string account_;
        private string nick_;
        private int guid_;
        private long gold_;
        private bool bot_;

        public string Account
        {
            get { return account_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                account_ = value;
            }
        }

        public string Nick
        {
            get { return nick_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                nick_ = value;
            }
        }

        public int Guid
        {
            get { return guid_; }
            set
            {
                fingerprint.Touch(tag.Offset + 2);
                guid_ = value;
            }
        }

        public long Gold
        {
            get { return gold_; }
            set
            {
                fingerprint.Touch(tag.Offset + 3);
                gold_ = value;
            }
        }

        public bool Bot
        {
            get { return bot_; }
            set
            {
                fingerprint.Touch(tag.Offset + 4);
                bot_ = value;
            }
        }

        static Member()
        {
            tag = new Tag(null, typeof(Member), 5);
        }

        public Member()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected Member(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            Member o = (Member)other;
            if (account_ != o.account_)
            {
                return false;
            }
            if (nick_ != o.nick_)
            {
                return false;
            }
            if (guid_ != o.guid_)
            {
                return false;
            }
            if (gold_ != o.gold_)
            {
                return false;
            }
            if (bot_ != o.bot_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(account_);
            }
            if (touched[1])
            {
                hash.Update(tag.Offset + 1);
                hash.Update(nick_);
            }
            if (touched[2])
            {
                hash.Update(tag.Offset + 2);
                hash.Update(guid_);
            }
            if (touched[3])
            {
                hash.Update(tag.Offset + 3);
                hash.Update(gold_);
            }
            if (touched[4])
            {
                hash.Update(tag.Offset + 4);
                hash.Update(bot_);
            }
            return hash.Code;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            Member o = (Member)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (account_ != o.account_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (nick_ != o.nick_)
                {
                    return false;
                }
            }
            if (touched[2])
            {
                if (guid_ != o.guid_)
                {
                    return false;
                }
            }
            if (touched[3])
            {
                if (gold_ != o.gold_)
                {
                    return false;
                }
            }
            if (touched[4])
            {
                if (bot_ != o.bot_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out account_);
            }
            if (touched[1])
            {
                deserializer.Read(out nick_);
            }
            if (touched[2])
            {
                deserializer.Read(out guid_);
            }
            if (touched[3])
            {
                deserializer.Read(out gold_);
            }
            if (touched[4])
            {
                deserializer.Read(out bot_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Account", out account_);
            deserializer.Read("Nick", out nick_);
            deserializer.Read("Guid", out guid_);
            deserializer.Read("Gold", out gold_);
            deserializer.Read("Bot", out bot_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(account_);
            }
            if (touched[1])
            {
                serializer.Write(nick_);
            }
            if (touched[2])
            {
                serializer.Write(guid_);
            }
            if (touched[3])
            {
                serializer.Write(gold_);
            }
            if (touched[4])
            {
                serializer.Write(bot_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Account", account_);
            serializer.Write("Nick", nick_);
            serializer.Write("Guid", guid_);
            serializer.Write("Gold", gold_);
            serializer.Write("Bot", bot_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(account_);
            }
            if (touched[1])
            {
                length += Serializer.GetLength(nick_);
            }
            if (touched[2])
            {
                length += Serializer.GetLength(guid_);
            }
            if (touched[3])
            {
                length += Serializer.GetLength(gold_);
            }
            if (touched[4])
            {
                length += Serializer.GetLength(bot_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Account=\"{0}\"", account_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Nick=\"{0}\"", nick_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Guid={0}", guid_);
            stringBuilder.AppendFormat(" Gold={0}", gold_);
            stringBuilder.AppendFormat(" Bot={0}", bot_);
        }

        private void Initialize()
        {
            account_ = "";
            nick_ = "";
            guid_ = 0;
            gold_ = 0;
            bot_ = false;
        }
    }

    public class EventMatchReq : Event
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private int zone_;
        private Member requester_;

        public int Zone
        {
            get { return zone_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                zone_ = value;
            }
        }

        public Member Requester
        {
            get { return requester_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                requester_ = value;
            }
        }

        static EventMatchReq()
        {
            tag = new Tag(Event.tag, typeof(EventMatchReq), 2,
                    (int)EventInstanceTypes.MatchReq);
        }

        public new static EventMatchReq New()
        {
            return new EventMatchReq();
        }

        public EventMatchReq()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventMatchReq(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventMatchReq o = (EventMatchReq)other;
            if (zone_ != o.zone_)
            {
                return false;
            }
            if (requester_ != o.requester_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(zone_);
            }
            if (touched[1])
            {
                hash.Update(tag.Offset + 1);
                hash.Update(requester_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventMatchReq.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventMatchReq o = (EventMatchReq)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (zone_ != o.zone_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (requester_ != o.requester_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out zone_);
            }
            if (touched[1])
            {
                deserializer.Read(out requester_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Zone", out zone_);
            deserializer.Read("Requester", out requester_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(zone_);
            }
            if (touched[1])
            {
                serializer.Write(requester_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Zone", zone_);
            serializer.Write("Requester", requester_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(zone_);
            }
            if (touched[1])
            {
                length += Serializer.GetLength(requester_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Zone={0}", zone_);
            stringBuilder.AppendFormat(" Requester={0}", requester_);
        }

        private void Initialize()
        {
            zone_ = 0;
            requester_ = null;
        }
    }

    public class EventMatchResp : Event
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private int zone_;
        private int result_;
        private bool create_;
        private int serverId_;
        private int runnerId_;
        private int instanceId_;
        private List<Member> members_;

        public int Zone
        {
            get { return zone_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                zone_ = value;
            }
        }

        public int Result
        {
            get { return result_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                result_ = value;
            }
        }

        public bool Create
        {
            get { return create_; }
            set
            {
                fingerprint.Touch(tag.Offset + 2);
                create_ = value;
            }
        }

        public int ServerId
        {
            get { return serverId_; }
            set
            {
                fingerprint.Touch(tag.Offset + 3);
                serverId_ = value;
            }
        }

        public int RunnerId
        {
            get { return runnerId_; }
            set
            {
                fingerprint.Touch(tag.Offset + 4);
                runnerId_ = value;
            }
        }

        public int InstanceId
        {
            get { return instanceId_; }
            set
            {
                fingerprint.Touch(tag.Offset + 5);
                instanceId_ = value;
            }
        }

        public List<Member> Members
        {
            get { return members_; }
            set
            {
                fingerprint.Touch(tag.Offset + 6);
                members_ = value;
            }
        }

        static EventMatchResp()
        {
            tag = new Tag(Event.tag, typeof(EventMatchResp), 7,
                    (int)EventInstanceTypes.MatchResp);
        }

        public new static EventMatchResp New()
        {
            return new EventMatchResp();
        }

        public EventMatchResp()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventMatchResp(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventMatchResp o = (EventMatchResp)other;
            if (zone_ != o.zone_)
            {
                return false;
            }
            if (result_ != o.result_)
            {
                return false;
            }
            if (create_ != o.create_)
            {
                return false;
            }
            if (serverId_ != o.serverId_)
            {
                return false;
            }
            if (runnerId_ != o.runnerId_)
            {
                return false;
            }
            if (instanceId_ != o.instanceId_)
            {
                return false;
            }
            if (!Extensions.EqualsExtended(members_, o.members_))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(zone_);
            }
            if (touched[1])
            {
                hash.Update(tag.Offset + 1);
                hash.Update(result_);
            }
            if (touched[2])
            {
                hash.Update(tag.Offset + 2);
                hash.Update(create_);
            }
            if (touched[3])
            {
                hash.Update(tag.Offset + 3);
                hash.Update(serverId_);
            }
            if (touched[4])
            {
                hash.Update(tag.Offset + 4);
                hash.Update(runnerId_);
            }
            if (touched[5])
            {
                hash.Update(tag.Offset + 5);
                hash.Update(instanceId_);
            }
            if (touched[6])
            {
                hash.Update(tag.Offset + 6);
                hash.Update(members_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventMatchResp.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventMatchResp o = (EventMatchResp)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (zone_ != o.zone_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (result_ != o.result_)
                {
                    return false;
                }
            }
            if (touched[2])
            {
                if (create_ != o.create_)
                {
                    return false;
                }
            }
            if (touched[3])
            {
                if (serverId_ != o.serverId_)
                {
                    return false;
                }
            }
            if (touched[4])
            {
                if (runnerId_ != o.runnerId_)
                {
                    return false;
                }
            }
            if (touched[5])
            {
                if (instanceId_ != o.instanceId_)
                {
                    return false;
                }
            }
            if (touched[6])
            {
                if (members_ != o.members_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out zone_);
            }
            if (touched[1])
            {
                deserializer.Read(out result_);
            }
            if (touched[2])
            {
                deserializer.Read(out create_);
            }
            if (touched[3])
            {
                deserializer.Read(out serverId_);
            }
            if (touched[4])
            {
                deserializer.Read(out runnerId_);
            }
            if (touched[5])
            {
                deserializer.Read(out instanceId_);
            }
            if (touched[6])
            {
                deserializer.Read(out members_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Zone", out zone_);
            deserializer.Read("Result", out result_);
            deserializer.Read("Create", out create_);
            deserializer.Read("ServerId", out serverId_);
            deserializer.Read("RunnerId", out runnerId_);
            deserializer.Read("InstanceId", out instanceId_);
            deserializer.Read("Members", out members_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(zone_);
            }
            if (touched[1])
            {
                serializer.Write(result_);
            }
            if (touched[2])
            {
                serializer.Write(create_);
            }
            if (touched[3])
            {
                serializer.Write(serverId_);
            }
            if (touched[4])
            {
                serializer.Write(runnerId_);
            }
            if (touched[5])
            {
                serializer.Write(instanceId_);
            }
            if (touched[6])
            {
                serializer.Write(members_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Zone", zone_);
            serializer.Write("Result", result_);
            serializer.Write("Create", create_);
            serializer.Write("ServerId", serverId_);
            serializer.Write("RunnerId", runnerId_);
            serializer.Write("InstanceId", instanceId_);
            serializer.Write("Members", members_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(zone_);
            }
            if (touched[1])
            {
                length += Serializer.GetLength(result_);
            }
            if (touched[2])
            {
                length += Serializer.GetLength(create_);
            }
            if (touched[3])
            {
                length += Serializer.GetLength(serverId_);
            }
            if (touched[4])
            {
                length += Serializer.GetLength(runnerId_);
            }
            if (touched[5])
            {
                length += Serializer.GetLength(instanceId_);
            }
            if (touched[6])
            {
                length += Serializer.GetLength(members_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Zone={0}", zone_);
            stringBuilder.AppendFormat(" Result={0}", result_);
            stringBuilder.AppendFormat(" Create={0}", create_);
            stringBuilder.AppendFormat(" ServerId={0}", serverId_);
            stringBuilder.AppendFormat(" RunnerId={0}", runnerId_);
            stringBuilder.AppendFormat(" InstanceId={0}", instanceId_);
            stringBuilder.AppendFormat(" Members={0}", members_.ToStringExtended());
        }

        private void Initialize()
        {
            zone_ = 0;
            result_ = 0;
            create_ = false;
            serverId_ = 0;
            runnerId_ = 0;
            instanceId_ = 0;
            members_ = null;
        }
    }

    public class EventInstanceBase : Event
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private int serverId_;
        private int runnerId_;
        private int instanceId_;
        private bool posted_;

        public int ServerId
        {
            get { return serverId_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                serverId_ = value;
            }
        }

        public int RunnerId
        {
            get { return runnerId_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                runnerId_ = value;
            }
        }

        public int InstanceId
        {
            get { return instanceId_; }
            set
            {
                fingerprint.Touch(tag.Offset + 2);
                instanceId_ = value;
            }
        }

        public bool Posted
        {
            get { return posted_; }
            set
            {
                fingerprint.Touch(tag.Offset + 3);
                posted_ = value;
            }
        }

        static EventInstanceBase()
        {
            tag = new Tag(Event.tag, typeof(EventInstanceBase), 4,
                    (int)EventIntanceTypes.Base);
        }

        public new static EventInstanceBase New()
        {
            return new EventInstanceBase();
        }

        public EventInstanceBase()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventInstanceBase(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventInstanceBase o = (EventInstanceBase)other;
            if (serverId_ != o.serverId_)
            {
                return false;
            }
            if (runnerId_ != o.runnerId_)
            {
                return false;
            }
            if (instanceId_ != o.instanceId_)
            {
                return false;
            }
            if (posted_ != o.posted_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(serverId_);
            }
            if (touched[1])
            {
                hash.Update(tag.Offset + 1);
                hash.Update(runnerId_);
            }
            if (touched[2])
            {
                hash.Update(tag.Offset + 2);
                hash.Update(instanceId_);
            }
            if (touched[3])
            {
                hash.Update(tag.Offset + 3);
                hash.Update(posted_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventInstanceBase.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventInstanceBase o = (EventInstanceBase)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (serverId_ != o.serverId_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (runnerId_ != o.runnerId_)
                {
                    return false;
                }
            }
            if (touched[2])
            {
                if (instanceId_ != o.instanceId_)
                {
                    return false;
                }
            }
            if (touched[3])
            {
                if (posted_ != o.posted_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out serverId_);
            }
            if (touched[1])
            {
                deserializer.Read(out runnerId_);
            }
            if (touched[2])
            {
                deserializer.Read(out instanceId_);
            }
            if (touched[3])
            {
                deserializer.Read(out posted_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("ServerId", out serverId_);
            deserializer.Read("RunnerId", out runnerId_);
            deserializer.Read("InstanceId", out instanceId_);
            deserializer.Read("Posted", out posted_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(serverId_);
            }
            if (touched[1])
            {
                serializer.Write(runnerId_);
            }
            if (touched[2])
            {
                serializer.Write(instanceId_);
            }
            if (touched[3])
            {
                serializer.Write(posted_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("ServerId", serverId_);
            serializer.Write("RunnerId", runnerId_);
            serializer.Write("InstanceId", instanceId_);
            serializer.Write("Posted", posted_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(serverId_);
            }
            if (touched[1])
            {
                length += Serializer.GetLength(runnerId_);
            }
            if (touched[2])
            {
                length += Serializer.GetLength(instanceId_);
            }
            if (touched[3])
            {
                length += Serializer.GetLength(posted_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" ServerId={0}", serverId_);
            stringBuilder.AppendFormat(" RunnerId={0}", runnerId_);
            stringBuilder.AppendFormat(" InstanceId={0}", instanceId_);
            stringBuilder.AppendFormat(" Posted={0}", posted_);
        }

        private void Initialize()
        {
            serverId_ = 0;
            runnerId_ = 0;
            instanceId_ = 0;
            posted_ = false;
        }
    }

    public class EventJoinReq : EventInstanceBase
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private int zone_;
        private int result_;
        private bool create_;
        private List<Member> members_;

        public int Zone
        {
            get { return zone_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                zone_ = value;
            }
        }

        public int Result
        {
            get { return result_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                result_ = value;
            }
        }

        public bool Create
        {
            get { return create_; }
            set
            {
                fingerprint.Touch(tag.Offset + 2);
                create_ = value;
            }
        }

        public List<Member> Members
        {
            get { return members_; }
            set
            {
                fingerprint.Touch(tag.Offset + 3);
                members_ = value;
            }
        }

        static EventJoinReq()
        {
            tag = new Tag(EventInstanceBase.tag, typeof(EventJoinReq), 4,
                    (int)EventInstanceTypes.JoinReq);
        }

        public new static EventJoinReq New()
        {
            return new EventJoinReq();
        }

        public EventJoinReq()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventJoinReq(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventJoinReq o = (EventJoinReq)other;
            if (zone_ != o.zone_)
            {
                return false;
            }
            if (result_ != o.result_)
            {
                return false;
            }
            if (create_ != o.create_)
            {
                return false;
            }
            if (!Extensions.EqualsExtended(members_, o.members_))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(zone_);
            }
            if (touched[1])
            {
                hash.Update(tag.Offset + 1);
                hash.Update(result_);
            }
            if (touched[2])
            {
                hash.Update(tag.Offset + 2);
                hash.Update(create_);
            }
            if (touched[3])
            {
                hash.Update(tag.Offset + 3);
                hash.Update(members_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventJoinReq.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventJoinReq o = (EventJoinReq)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (zone_ != o.zone_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (result_ != o.result_)
                {
                    return false;
                }
            }
            if (touched[2])
            {
                if (create_ != o.create_)
                {
                    return false;
                }
            }
            if (touched[3])
            {
                if (members_ != o.members_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out zone_);
            }
            if (touched[1])
            {
                deserializer.Read(out result_);
            }
            if (touched[2])
            {
                deserializer.Read(out create_);
            }
            if (touched[3])
            {
                deserializer.Read(out members_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Zone", out zone_);
            deserializer.Read("Result", out result_);
            deserializer.Read("Create", out create_);
            deserializer.Read("Members", out members_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(zone_);
            }
            if (touched[1])
            {
                serializer.Write(result_);
            }
            if (touched[2])
            {
                serializer.Write(create_);
            }
            if (touched[3])
            {
                serializer.Write(members_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Zone", zone_);
            serializer.Write("Result", result_);
            serializer.Write("Create", create_);
            serializer.Write("Members", members_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(zone_);
            }
            if (touched[1])
            {
                length += Serializer.GetLength(result_);
            }
            if (touched[2])
            {
                length += Serializer.GetLength(create_);
            }
            if (touched[3])
            {
                length += Serializer.GetLength(members_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Zone={0}", zone_);
            stringBuilder.AppendFormat(" Result={0}", result_);
            stringBuilder.AppendFormat(" Create={0}", create_);
            stringBuilder.AppendFormat(" Members={0}", members_.ToStringExtended());
        }

        private void Initialize()
        {
            zone_ = 0;
            result_ = 0;
            create_ = false;
            members_ = null;
        }
    }

    public class EventJoinResp : EventInstanceBase
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private int result_;
        private List<Member> members_;

        public int Result
        {
            get { return result_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                result_ = value;
            }
        }

        public List<Member> Members
        {
            get { return members_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                members_ = value;
            }
        }

        static EventJoinResp()
        {
            tag = new Tag(EventInstanceBase.tag, typeof(EventJoinResp), 2,
                    (int)EventInstanceTypes.JoinResp);
        }

        public new static EventJoinResp New()
        {
            return new EventJoinResp();
        }

        public EventJoinResp()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventJoinResp(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventJoinResp o = (EventJoinResp)other;
            if (result_ != o.result_)
            {
                return false;
            }
            if (!Extensions.EqualsExtended(members_, o.members_))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(result_);
            }
            if (touched[1])
            {
                hash.Update(tag.Offset + 1);
                hash.Update(members_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventJoinResp.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventJoinResp o = (EventJoinResp)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (result_ != o.result_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (members_ != o.members_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out result_);
            }
            if (touched[1])
            {
                deserializer.Read(out members_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Result", out result_);
            deserializer.Read("Members", out members_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(result_);
            }
            if (touched[1])
            {
                serializer.Write(members_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Result", result_);
            serializer.Write("Members", members_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(result_);
            }
            if (touched[1])
            {
                length += Serializer.GetLength(members_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Result={0}", result_);
            stringBuilder.AppendFormat(" Members={0}", members_.ToStringExtended());
        }

        private void Initialize()
        {
            result_ = 0;
            members_ = null;
        }
    }

    public class EventLeaveReq : EventInstanceBase
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private string account_;

        public string Account
        {
            get { return account_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                account_ = value;
            }
        }

        static EventLeaveReq()
        {
            tag = new Tag(EventInstanceBase.tag, typeof(EventLeaveReq), 1,
                    (int)EventInstanceTypes.LeaveReq);
        }

        public new static EventLeaveReq New()
        {
            return new EventLeaveReq();
        }

        public EventLeaveReq()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventLeaveReq(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventLeaveReq o = (EventLeaveReq)other;
            if (account_ != o.account_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(account_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventLeaveReq.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventLeaveReq o = (EventLeaveReq)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (account_ != o.account_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out account_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Account", out account_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(account_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Account", account_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(account_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Account=\"{0}\"", account_.Replace("\"", "\\\""));
        }

        private void Initialize()
        {
            account_ = "";
        }
    }

    public class EventLeaveResp : EventInstanceBase
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private string account_;
        private int result_;

        public string Account
        {
            get { return account_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                account_ = value;
            }
        }

        public int Result
        {
            get { return result_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                result_ = value;
            }
        }

        static EventLeaveResp()
        {
            tag = new Tag(EventInstanceBase.tag, typeof(EventLeaveResp), 2,
                    (int)EventInstanceTypes.LeaveResp);
        }

        public new static EventLeaveResp New()
        {
            return new EventLeaveResp();
        }

        public EventLeaveResp()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventLeaveResp(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventLeaveResp o = (EventLeaveResp)other;
            if (account_ != o.account_)
            {
                return false;
            }
            if (result_ != o.result_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(account_);
            }
            if (touched[1])
            {
                hash.Update(tag.Offset + 1);
                hash.Update(result_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventLeaveResp.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventLeaveResp o = (EventLeaveResp)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (account_ != o.account_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (result_ != o.result_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out account_);
            }
            if (touched[1])
            {
                deserializer.Read(out result_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Account", out account_);
            deserializer.Read("Result", out result_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(account_);
            }
            if (touched[1])
            {
                serializer.Write(result_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Account", account_);
            serializer.Write("Result", result_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(account_);
            }
            if (touched[1])
            {
                length += Serializer.GetLength(result_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Account=\"{0}\"", account_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Result={0}", result_);
        }

        private void Initialize()
        {
            account_ = "";
            result_ = 0;
        }
    }

    public class EventStatus : Event
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private int serverId_;
        private int runnerId_;
        private int instanceId_;
        private int status_;
        private List<Member> members_;

        public int ServerId
        {
            get { return serverId_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                serverId_ = value;
            }
        }

        public int RunnerId
        {
            get { return runnerId_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                runnerId_ = value;
            }
        }

        public int InstanceId
        {
            get { return instanceId_; }
            set
            {
                fingerprint.Touch(tag.Offset + 2);
                instanceId_ = value;
            }
        }

        public int Status
        {
            get { return status_; }
            set
            {
                fingerprint.Touch(tag.Offset + 3);
                status_ = value;
            }
        }

        public List<Member> Members
        {
            get { return members_; }
            set
            {
                fingerprint.Touch(tag.Offset + 4);
                members_ = value;
            }
        }

        static EventStatus()
        {
            tag = new Tag(Event.tag, typeof(EventStatus), 5,
                    (int)EventInstanceTypes.Status);
        }

        public new static EventStatus New()
        {
            return new EventStatus();
        }

        public EventStatus()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventStatus(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventStatus o = (EventStatus)other;
            if (serverId_ != o.serverId_)
            {
                return false;
            }
            if (runnerId_ != o.runnerId_)
            {
                return false;
            }
            if (instanceId_ != o.instanceId_)
            {
                return false;
            }
            if (status_ != o.status_)
            {
                return false;
            }
            if (!Extensions.EqualsExtended(members_, o.members_))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(serverId_);
            }
            if (touched[1])
            {
                hash.Update(tag.Offset + 1);
                hash.Update(runnerId_);
            }
            if (touched[2])
            {
                hash.Update(tag.Offset + 2);
                hash.Update(instanceId_);
            }
            if (touched[3])
            {
                hash.Update(tag.Offset + 3);
                hash.Update(status_);
            }
            if (touched[4])
            {
                hash.Update(tag.Offset + 4);
                hash.Update(members_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventStatus.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventStatus o = (EventStatus)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (serverId_ != o.serverId_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (runnerId_ != o.runnerId_)
                {
                    return false;
                }
            }
            if (touched[2])
            {
                if (instanceId_ != o.instanceId_)
                {
                    return false;
                }
            }
            if (touched[3])
            {
                if (status_ != o.status_)
                {
                    return false;
                }
            }
            if (touched[4])
            {
                if (members_ != o.members_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out serverId_);
            }
            if (touched[1])
            {
                deserializer.Read(out runnerId_);
            }
            if (touched[2])
            {
                deserializer.Read(out instanceId_);
            }
            if (touched[3])
            {
                deserializer.Read(out status_);
            }
            if (touched[4])
            {
                deserializer.Read(out members_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("ServerId", out serverId_);
            deserializer.Read("RunnerId", out runnerId_);
            deserializer.Read("InstanceId", out instanceId_);
            deserializer.Read("Status", out status_);
            deserializer.Read("Members", out members_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(serverId_);
            }
            if (touched[1])
            {
                serializer.Write(runnerId_);
            }
            if (touched[2])
            {
                serializer.Write(instanceId_);
            }
            if (touched[3])
            {
                serializer.Write(status_);
            }
            if (touched[4])
            {
                serializer.Write(members_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("ServerId", serverId_);
            serializer.Write("RunnerId", runnerId_);
            serializer.Write("InstanceId", instanceId_);
            serializer.Write("Status", status_);
            serializer.Write("Members", members_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(serverId_);
            }
            if (touched[1])
            {
                length += Serializer.GetLength(runnerId_);
            }
            if (touched[2])
            {
                length += Serializer.GetLength(instanceId_);
            }
            if (touched[3])
            {
                length += Serializer.GetLength(status_);
            }
            if (touched[4])
            {
                length += Serializer.GetLength(members_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" ServerId={0}", serverId_);
            stringBuilder.AppendFormat(" RunnerId={0}", runnerId_);
            stringBuilder.AppendFormat(" InstanceId={0}", instanceId_);
            stringBuilder.AppendFormat(" Status={0}", status_);
            stringBuilder.AppendFormat(" Members={0}", members_.ToStringExtended());
        }

        private void Initialize()
        {
            serverId_ = 0;
            runnerId_ = 0;
            instanceId_ = 0;
            status_ = 0;
            members_ = null;
        }
    }

    public class EventRunnerStatus : Event
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private int serverId_;
        private int runnerId_;
        private int status_;
        private int instanceCount_;

        public int ServerId
        {
            get { return serverId_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                serverId_ = value;
            }
        }

        public int RunnerId
        {
            get { return runnerId_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                runnerId_ = value;
            }
        }

        public int Status
        {
            get { return status_; }
            set
            {
                fingerprint.Touch(tag.Offset + 2);
                status_ = value;
            }
        }

        public int InstanceCount
        {
            get { return instanceCount_; }
            set
            {
                fingerprint.Touch(tag.Offset + 3);
                instanceCount_ = value;
            }
        }

        static EventRunnerStatus()
        {
            tag = new Tag(Event.tag, typeof(EventRunnerStatus), 4,
                    (int)EventInstanceTypes.RunnerStatus);
        }

        public new static EventRunnerStatus New()
        {
            return new EventRunnerStatus();
        }

        public EventRunnerStatus()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventRunnerStatus(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventRunnerStatus o = (EventRunnerStatus)other;
            if (serverId_ != o.serverId_)
            {
                return false;
            }
            if (runnerId_ != o.runnerId_)
            {
                return false;
            }
            if (status_ != o.status_)
            {
                return false;
            }
            if (instanceCount_ != o.instanceCount_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(serverId_);
            }
            if (touched[1])
            {
                hash.Update(tag.Offset + 1);
                hash.Update(runnerId_);
            }
            if (touched[2])
            {
                hash.Update(tag.Offset + 2);
                hash.Update(status_);
            }
            if (touched[3])
            {
                hash.Update(tag.Offset + 3);
                hash.Update(instanceCount_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventRunnerStatus.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventRunnerStatus o = (EventRunnerStatus)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (serverId_ != o.serverId_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (runnerId_ != o.runnerId_)
                {
                    return false;
                }
            }
            if (touched[2])
            {
                if (status_ != o.status_)
                {
                    return false;
                }
            }
            if (touched[3])
            {
                if (instanceCount_ != o.instanceCount_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out serverId_);
            }
            if (touched[1])
            {
                deserializer.Read(out runnerId_);
            }
            if (touched[2])
            {
                deserializer.Read(out status_);
            }
            if (touched[3])
            {
                deserializer.Read(out instanceCount_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("ServerId", out serverId_);
            deserializer.Read("RunnerId", out runnerId_);
            deserializer.Read("Status", out status_);
            deserializer.Read("InstanceCount", out instanceCount_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(serverId_);
            }
            if (touched[1])
            {
                serializer.Write(runnerId_);
            }
            if (touched[2])
            {
                serializer.Write(status_);
            }
            if (touched[3])
            {
                serializer.Write(instanceCount_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("ServerId", serverId_);
            serializer.Write("RunnerId", runnerId_);
            serializer.Write("Status", status_);
            serializer.Write("InstanceCount", instanceCount_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(serverId_);
            }
            if (touched[1])
            {
                length += Serializer.GetLength(runnerId_);
            }
            if (touched[2])
            {
                length += Serializer.GetLength(status_);
            }
            if (touched[3])
            {
                length += Serializer.GetLength(instanceCount_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" ServerId={0}", serverId_);
            stringBuilder.AppendFormat(" RunnerId={0}", runnerId_);
            stringBuilder.AppendFormat(" Status={0}", status_);
            stringBuilder.AppendFormat(" InstanceCount={0}", instanceCount_);
        }

        private void Initialize()
        {
            serverId_ = 0;
            runnerId_ = 0;
            status_ = 0;
            instanceCount_ = 0;
        }
    }
}
