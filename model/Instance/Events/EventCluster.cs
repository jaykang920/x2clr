// auto-generated by x2clr xpiler

using System;
using System.Collections.Generic;
using System.Text;

using x2;

namespace Events.Cluster
{
    /// <summary>
    /// id : 1001 ~ 2000
    /// </summary>
    public class ServerStatus : Cell
    {
        protected new static readonly Tag tag;

        private int id_;
        private string ip_;
        private int port_;
        private bool status_;

        public int Id
        {
            get { return id_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                id_ = value;
            }
        }

        public string Ip
        {
            get { return ip_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                ip_ = value;
            }
        }

        public int Port
        {
            get { return port_; }
            set
            {
                fingerprint.Touch(tag.Offset + 2);
                port_ = value;
            }
        }

        public bool Status
        {
            get { return status_; }
            set
            {
                fingerprint.Touch(tag.Offset + 3);
                status_ = value;
            }
        }

        static ServerStatus()
        {
            tag = new Tag(null, typeof(ServerStatus), 4);
        }

        public ServerStatus()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected ServerStatus(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            ServerStatus o = (ServerStatus)other;
            if (id_ != o.id_)
            {
                return false;
            }
            if (ip_ != o.ip_)
            {
                return false;
            }
            if (port_ != o.port_)
            {
                return false;
            }
            if (status_ != o.status_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(id_);
            }
            if (touched[1])
            {
                hash.Update(tag.Offset + 1);
                hash.Update(ip_);
            }
            if (touched[2])
            {
                hash.Update(tag.Offset + 2);
                hash.Update(port_);
            }
            if (touched[3])
            {
                hash.Update(tag.Offset + 3);
                hash.Update(status_);
            }
            return hash.Code;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            ServerStatus o = (ServerStatus)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (id_ != o.id_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (ip_ != o.ip_)
                {
                    return false;
                }
            }
            if (touched[2])
            {
                if (port_ != o.port_)
                {
                    return false;
                }
            }
            if (touched[3])
            {
                if (status_ != o.status_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out id_);
            }
            if (touched[1])
            {
                deserializer.Read(out ip_);
            }
            if (touched[2])
            {
                deserializer.Read(out port_);
            }
            if (touched[3])
            {
                deserializer.Read(out status_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Id", out id_);
            deserializer.Read("Ip", out ip_);
            deserializer.Read("Port", out port_);
            deserializer.Read("Status", out status_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(id_);
            }
            if (touched[1])
            {
                serializer.Write(ip_);
            }
            if (touched[2])
            {
                serializer.Write(port_);
            }
            if (touched[3])
            {
                serializer.Write(status_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Id", id_);
            serializer.Write("Ip", ip_);
            serializer.Write("Port", port_);
            serializer.Write("Status", status_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(id_);
            }
            if (touched[1])
            {
                length += Serializer.GetLength(ip_);
            }
            if (touched[2])
            {
                length += Serializer.GetLength(port_);
            }
            if (touched[3])
            {
                length += Serializer.GetLength(status_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Id={0}", id_);
            stringBuilder.AppendFormat(" Ip=\"{0}\"", ip_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Port={0}", port_);
            stringBuilder.AppendFormat(" Status={0}", status_);
        }

        private void Initialize()
        {
            id_ = 0;
            ip_ = "";
            port_ = 0;
            status_ = false;
        }
    }

    public class EventServerList : Event
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private List<ServerStatus> name_;

        public List<ServerStatus> Name
        {
            get { return name_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                name_ = value;
            }
        }

        static EventServerList()
        {
            tag = new Tag(Event.tag, typeof(EventServerList), 1,
                    (int)EventClusterTypes.ServerList);
        }

        public new static EventServerList New()
        {
            return new EventServerList();
        }

        public EventServerList()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventServerList(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventServerList o = (EventServerList)other;
            if (!Extensions.EqualsExtended(name_, o.name_))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(name_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventServerList.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventServerList o = (EventServerList)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (name_ != o.name_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out name_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Name", out name_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(name_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Name", name_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(name_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Name={0}", name_.ToStringExtended());
        }

        private void Initialize()
        {
            name_ = null;
        }
    }

    public class EventJoin : Event
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private int id_;
        private string ip_;
        private int port_;

        public int Id
        {
            get { return id_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                id_ = value;
            }
        }

        public string Ip
        {
            get { return ip_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                ip_ = value;
            }
        }

        public int Port
        {
            get { return port_; }
            set
            {
                fingerprint.Touch(tag.Offset + 2);
                port_ = value;
            }
        }

        static EventJoin()
        {
            tag = new Tag(Event.tag, typeof(EventJoin), 3,
                    (int)EventClusterTypes.Join);
        }

        public new static EventJoin New()
        {
            return new EventJoin();
        }

        public EventJoin()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventJoin(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventJoin o = (EventJoin)other;
            if (id_ != o.id_)
            {
                return false;
            }
            if (ip_ != o.ip_)
            {
                return false;
            }
            if (port_ != o.port_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(id_);
            }
            if (touched[1])
            {
                hash.Update(tag.Offset + 1);
                hash.Update(ip_);
            }
            if (touched[2])
            {
                hash.Update(tag.Offset + 2);
                hash.Update(port_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventJoin.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventJoin o = (EventJoin)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (id_ != o.id_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (ip_ != o.ip_)
                {
                    return false;
                }
            }
            if (touched[2])
            {
                if (port_ != o.port_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out id_);
            }
            if (touched[1])
            {
                deserializer.Read(out ip_);
            }
            if (touched[2])
            {
                deserializer.Read(out port_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Id", out id_);
            deserializer.Read("Ip", out ip_);
            deserializer.Read("Port", out port_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(id_);
            }
            if (touched[1])
            {
                serializer.Write(ip_);
            }
            if (touched[2])
            {
                serializer.Write(port_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Id", id_);
            serializer.Write("Ip", ip_);
            serializer.Write("Port", port_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(id_);
            }
            if (touched[1])
            {
                length += Serializer.GetLength(ip_);
            }
            if (touched[2])
            {
                length += Serializer.GetLength(port_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Id={0}", id_);
            stringBuilder.AppendFormat(" Ip=\"{0}\"", ip_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Port={0}", port_);
        }

        private void Initialize()
        {
            id_ = 0;
            ip_ = "";
            port_ = 0;
        }
    }

    public class EventLeave : Event
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private int id_;

        public int Id
        {
            get { return id_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                id_ = value;
            }
        }

        static EventLeave()
        {
            tag = new Tag(Event.tag, typeof(EventLeave), 1,
                    (int)EventClusterTypes.Leave);
        }

        public new static EventLeave New()
        {
            return new EventLeave();
        }

        public EventLeave()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected EventLeave(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            EventLeave o = (EventLeave)other;
            if (id_ != o.id_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(id_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return EventLeave.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            EventLeave o = (EventLeave)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (id_ != o.id_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out id_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Id", out id_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(id_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Id", id_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(id_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Id={0}", id_);
        }

        private void Initialize()
        {
            id_ = 0;
        }
    }
}
