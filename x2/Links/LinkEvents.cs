// auto-generated by xpiler

using System;
using System.Collections.Generic;
using System.Text;

using x2;

namespace x2
{
    public static class LinkEventType
    {
        public const int LinkSessionConnected = -10;
        public const int LinkSessionDisconnected = -11;
        public const int HandshakeReq = -12;
        public const int HandshakeResp = -13;
        public const int HandshakeAck = -14;
        public const int LinkSessionRecovered = -15;
        public const int SessionReq = -16;
        public const int SessionResp = -17;
        public const int SessionAck = -18;
        public const int SessionEnd = -19;

        private static ConstsInfo<int> info;

        static LinkEventType()
        {
            info = new ConstsInfo<int>();
            info.Add("LinkSessionConnected", -10);
            info.Add("LinkSessionDisconnected", -11);
            info.Add("HandshakeReq", -12);
            info.Add("HandshakeResp", -13);
            info.Add("HandshakeAck", -14);
            info.Add("LinkSessionRecovered", -15);
            info.Add("SessionReq", -16);
            info.Add("SessionResp", -17);
            info.Add("SessionAck", -18);
            info.Add("SessionEnd", -19);
        }

        public static string GetName(int value)
        {
            return info.GetName(value);
        }

        public static int Parse(string name)
        {
            return info.Parse(name);
        }

        public static bool TryParse(string name, out int result)
        {
            return info.TryParse(name, out result);
        }
    }

    public class LinkSessionConnected : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private string linkName_;
        private bool result_;
        private object context_;

        public string LinkName
        {
            get { return linkName_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                linkName_ = value;
            }
        }

        public bool Result
        {
            get { return result_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                result_ = value;
            }
        }

        public object Context
        {
            get { return context_; }
            set
            {
                fingerprint.Touch(tag.Offset + 2);
                context_ = value;
            }
        }

        static LinkSessionConnected()
        {
            tag = new Tag(Event.tag, typeof(LinkSessionConnected), 3,
                    (int)LinkEventType.LinkSessionConnected);
        }

        new public static LinkSessionConnected New()
        {
            return new LinkSessionConnected();
        }

        public LinkSessionConnected()
            : base(tag.NumProps)
        {
        }

        protected LinkSessionConnected(int length)
            : base(length + tag.NumProps)
        {
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            LinkSessionConnected o = (LinkSessionConnected)other;
            if (linkName_ != o.linkName_)
            {
                return false;
            }
            if (result_ != o.result_)
            {
                return false;
            }
            if (context_ != o.context_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(linkName_);
            }
            if (touched[1])
            {
                hash.Update(result_);
            }
            if (touched[2])
            {
                hash.Update(context_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            LinkSessionConnected o = (LinkSessionConnected)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (linkName_ != o.linkName_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (result_ != o.result_)
                {
                    return false;
                }
            }
            if (touched[2])
            {
                if (context_ != o.context_)
                {
                    return false;
                }
            }
            return true;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" LinkName=\"{0}\"", linkName_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Result={0}", result_);
            stringBuilder.AppendFormat(" Context={0}", context_);
        }
    }

    public class LinkSessionDisconnected : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private string linkName_;
        private int handle_;
        private object context_;

        public string LinkName
        {
            get { return linkName_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                linkName_ = value;
            }
        }

        public int Handle
        {
            get { return handle_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                handle_ = value;
            }
        }

        public object Context
        {
            get { return context_; }
            set
            {
                fingerprint.Touch(tag.Offset + 2);
                context_ = value;
            }
        }

        static LinkSessionDisconnected()
        {
            tag = new Tag(Event.tag, typeof(LinkSessionDisconnected), 3,
                    (int)LinkEventType.LinkSessionDisconnected);
        }

        new public static LinkSessionDisconnected New()
        {
            return new LinkSessionDisconnected();
        }

        public LinkSessionDisconnected()
            : base(tag.NumProps)
        {
        }

        protected LinkSessionDisconnected(int length)
            : base(length + tag.NumProps)
        {
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            LinkSessionDisconnected o = (LinkSessionDisconnected)other;
            if (linkName_ != o.linkName_)
            {
                return false;
            }
            if (handle_ != o.handle_)
            {
                return false;
            }
            if (context_ != o.context_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(linkName_);
            }
            if (touched[1])
            {
                hash.Update(handle_);
            }
            if (touched[2])
            {
                hash.Update(context_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            LinkSessionDisconnected o = (LinkSessionDisconnected)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (linkName_ != o.linkName_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (handle_ != o.handle_)
                {
                    return false;
                }
            }
            if (touched[2])
            {
                if (context_ != o.context_)
                {
                    return false;
                }
            }
            return true;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" LinkName=\"{0}\"", linkName_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Handle={0}", handle_);
            stringBuilder.AppendFormat(" Context={0}", context_);
        }
    }

    public class HandshakeReq : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private byte[] data_;

        public byte[] Data
        {
            get { return data_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                data_ = value;
            }
        }

        static HandshakeReq()
        {
            tag = new Tag(Event.tag, typeof(HandshakeReq), 1,
                    (int)LinkEventType.HandshakeReq);
        }

        new public static HandshakeReq New()
        {
            return new HandshakeReq();
        }

        public HandshakeReq()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected HandshakeReq(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            HandshakeReq o = (HandshakeReq)other;
            if (!Extensions.EqualsExtended(data_, o.data_))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(data_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            HandshakeReq o = (HandshakeReq)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (data_ != o.data_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out data_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Data", out data_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(data_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Data", data_);
        }

        public override int GetEncodedLength()
        {
            int length = base.GetEncodedLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetEncodedLength(data_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Data={0}", data_.ToStringExtended());
        }

        private void Initialize()
        {
            data_ = null;
        }
    }

    public class HandshakeResp : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private byte[] data_;

        public byte[] Data
        {
            get { return data_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                data_ = value;
            }
        }

        static HandshakeResp()
        {
            tag = new Tag(Event.tag, typeof(HandshakeResp), 1,
                    (int)LinkEventType.HandshakeResp);
        }

        new public static HandshakeResp New()
        {
            return new HandshakeResp();
        }

        public HandshakeResp()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected HandshakeResp(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            HandshakeResp o = (HandshakeResp)other;
            if (!Extensions.EqualsExtended(data_, o.data_))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(data_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            HandshakeResp o = (HandshakeResp)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (data_ != o.data_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out data_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Data", out data_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(data_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Data", data_);
        }

        public override int GetEncodedLength()
        {
            int length = base.GetEncodedLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetEncodedLength(data_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Data={0}", data_.ToStringExtended());
        }

        private void Initialize()
        {
            data_ = null;
        }
    }

    public class HandshakeAck : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private bool result_;

        public bool Result
        {
            get { return result_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                result_ = value;
            }
        }

        static HandshakeAck()
        {
            tag = new Tag(Event.tag, typeof(HandshakeAck), 1,
                    (int)LinkEventType.HandshakeAck);
        }

        new public static HandshakeAck New()
        {
            return new HandshakeAck();
        }

        public HandshakeAck()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected HandshakeAck(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            HandshakeAck o = (HandshakeAck)other;
            if (result_ != o.result_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(result_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            HandshakeAck o = (HandshakeAck)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (result_ != o.result_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out result_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Result", out result_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(result_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Result", result_);
        }

        public override int GetEncodedLength()
        {
            int length = base.GetEncodedLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetEncodedLength(result_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Result={0}", result_);
        }

        private void Initialize()
        {
            result_ = false;
        }
    }

    public class LinkSessionRecovered : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private string linkName_;
        private int handle_;
        private object context_;

        public string LinkName
        {
            get { return linkName_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                linkName_ = value;
            }
        }

        public int Handle
        {
            get { return handle_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                handle_ = value;
            }
        }

        public object Context
        {
            get { return context_; }
            set
            {
                fingerprint.Touch(tag.Offset + 2);
                context_ = value;
            }
        }

        static LinkSessionRecovered()
        {
            tag = new Tag(Event.tag, typeof(LinkSessionRecovered), 3,
                    (int)LinkEventType.LinkSessionRecovered);
        }

        new public static LinkSessionRecovered New()
        {
            return new LinkSessionRecovered();
        }

        public LinkSessionRecovered()
            : base(tag.NumProps)
        {
        }

        protected LinkSessionRecovered(int length)
            : base(length + tag.NumProps)
        {
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            LinkSessionRecovered o = (LinkSessionRecovered)other;
            if (linkName_ != o.linkName_)
            {
                return false;
            }
            if (handle_ != o.handle_)
            {
                return false;
            }
            if (context_ != o.context_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(linkName_);
            }
            if (touched[1])
            {
                hash.Update(handle_);
            }
            if (touched[2])
            {
                hash.Update(context_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            LinkSessionRecovered o = (LinkSessionRecovered)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (linkName_ != o.linkName_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (handle_ != o.handle_)
                {
                    return false;
                }
            }
            if (touched[2])
            {
                if (context_ != o.context_)
                {
                    return false;
                }
            }
            return true;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" LinkName=\"{0}\"", linkName_.Replace("\"", "\\\""));
            stringBuilder.AppendFormat(" Handle={0}", handle_);
            stringBuilder.AppendFormat(" Context={0}", context_);
        }
    }

    public class SessionReq : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private string token_;

        public string Token
        {
            get { return token_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                token_ = value;
            }
        }

        static SessionReq()
        {
            tag = new Tag(Event.tag, typeof(SessionReq), 1,
                    (int)LinkEventType.SessionReq);
        }

        new public static SessionReq New()
        {
            return new SessionReq();
        }

        public SessionReq()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected SessionReq(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            SessionReq o = (SessionReq)other;
            if (token_ != o.token_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(token_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            SessionReq o = (SessionReq)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (token_ != o.token_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out token_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Token", out token_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(token_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Token", token_);
        }

        public override int GetEncodedLength()
        {
            int length = base.GetEncodedLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetEncodedLength(token_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Token=\"{0}\"", token_.Replace("\"", "\\\""));
        }

        private void Initialize()
        {
            token_ = "";
        }
    }

    public class SessionResp : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private string token_;

        public string Token
        {
            get { return token_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                token_ = value;
            }
        }

        static SessionResp()
        {
            tag = new Tag(Event.tag, typeof(SessionResp), 1,
                    (int)LinkEventType.SessionResp);
        }

        new public static SessionResp New()
        {
            return new SessionResp();
        }

        public SessionResp()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected SessionResp(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            SessionResp o = (SessionResp)other;
            if (token_ != o.token_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(token_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            SessionResp o = (SessionResp)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (token_ != o.token_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out token_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Token", out token_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(token_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Token", token_);
        }

        public override int GetEncodedLength()
        {
            int length = base.GetEncodedLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetEncodedLength(token_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Token=\"{0}\"", token_.Replace("\"", "\\\""));
        }

        private void Initialize()
        {
            token_ = "";
        }
    }

    public class SessionAck : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private bool result_;

        public bool Result
        {
            get { return result_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                result_ = value;
            }
        }

        static SessionAck()
        {
            tag = new Tag(Event.tag, typeof(SessionAck), 1,
                    (int)LinkEventType.SessionAck);
        }

        new public static SessionAck New()
        {
            return new SessionAck();
        }

        public SessionAck()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected SessionAck(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            SessionAck o = (SessionAck)other;
            if (result_ != o.result_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(result_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            SessionAck o = (SessionAck)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (result_ != o.result_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out result_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Result", out result_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(result_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Result", result_);
        }

        public override int GetEncodedLength()
        {
            int length = base.GetEncodedLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetEncodedLength(result_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Result={0}", result_);
        }

        private void Initialize()
        {
            result_ = false;
        }
    }

    public class SessionEnd : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        static SessionEnd()
        {
            tag = new Tag(Event.tag, typeof(SessionEnd), 0,
                    (int)LinkEventType.SessionEnd);
        }

        new public static SessionEnd New()
        {
            return new SessionEnd();
        }

        public SessionEnd()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected SessionEnd(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
        }

        public override int GetEncodedLength()
        {
            int length = base.GetEncodedLength();
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
        }

        private void Initialize()
        {
        }
    }
}
