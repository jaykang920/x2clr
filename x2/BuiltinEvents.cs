// auto-generated by xpiler

using System;
using System.Collections.Generic;
using System.Text;

using x2;

namespace x2
{
    public static class BuiltinEventType
    {
        public const int FlowStart = -1;
        public const int FlowStop = -2;
        public const int TimeoutEvent = -3;

        private static ConstsInfo<int> info;

        static BuiltinEventType()
        {
            info = new ConstsInfo<int>();
            info.Add("FlowStart", -1);
            info.Add("FlowStop", -2);
            info.Add("TimeoutEvent", -3);
        }

        public static string GetName(int value)
        {
            return info.GetName(value);
        }

        public static int Parse(string name)
        {
            return info.Parse(name);
        }

        public static bool TryParse(string name, out int result)
        {
            return info.TryParse(name, out result);
        }
    }

    public class FlowStart : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        static FlowStart()
        {
            tag = new Tag(Event.tag, typeof(FlowStart), 0,
                    (int)BuiltinEventType.FlowStart);
        }

        new public static FlowStart New()
        {
            return new FlowStart();
        }

        public FlowStart()
            : base(tag.NumProps)
        {
        }

        protected FlowStart(int length)
            : base(length + tag.NumProps)
        {
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            return true;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
        }
    }

    public class FlowStop : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        static FlowStop()
        {
            tag = new Tag(Event.tag, typeof(FlowStop), 0,
                    (int)BuiltinEventType.FlowStop);
        }

        new public static FlowStop New()
        {
            return new FlowStop();
        }

        public FlowStop()
            : base(tag.NumProps)
        {
        }

        protected FlowStop(int length)
            : base(length + tag.NumProps)
        {
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            return true;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
        }
    }

    public class TimeoutEvent : Event
    {
        new protected static readonly Tag tag;

        new public static int TypeId { get { return tag.TypeId; } }

        private object key_;

        public object Key
        {
            get { return key_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                key_ = value;
            }
        }

        static TimeoutEvent()
        {
            tag = new Tag(Event.tag, typeof(TimeoutEvent), 1,
                    (int)BuiltinEventType.TimeoutEvent);
        }

        new public static TimeoutEvent New()
        {
            return new TimeoutEvent();
        }

        public TimeoutEvent()
            : base(tag.NumProps)
        {
        }

        protected TimeoutEvent(int length)
            : base(length + tag.NumProps)
        {
        }

        public override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            TimeoutEvent o = (TimeoutEvent)other;
            if (key_ != o.key_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(key_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override bool IsEquivalent(Cell other)
        {
            if (!base.IsEquivalent(other))
            {
                return false;
            }
            TimeoutEvent o = (TimeoutEvent)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (key_ != o.key_)
                {
                    return false;
                }
            }
            return true;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Key={0}", key_);
        }
    }
}
