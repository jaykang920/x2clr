// auto-generated by x2clr xpiler

using System;
using System.Collections.Generic;
using System.Text;

using x2;

namespace x2.Tests.Func
{
    public class HelloCaseEvent : Event
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private int foo_;
        private string bar_;

        public int Foo
        {
            get { return foo_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                foo_ = value;
            }
        }

        public string Bar
        {
            get { return bar_; }
            set
            {
                fingerprint.Touch(tag.Offset + 1);
                bar_ = value;
            }
        }

        static HelloCaseEvent()
        {
            tag = new Tag(Event.tag, typeof(HelloCaseEvent), 2,
                    1);
        }

        public new static HelloCaseEvent New()
        {
            return new HelloCaseEvent();
        }

        public HelloCaseEvent()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected HelloCaseEvent(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            HelloCaseEvent o = (HelloCaseEvent)other;
            if (foo_ != o.foo_)
            {
                return false;
            }
            if (bar_ != o.bar_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(foo_);
            }
            if (touched[1])
            {
                hash.Update(tag.Offset + 1);
                hash.Update(bar_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return HelloCaseEvent.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            HelloCaseEvent o = (HelloCaseEvent)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (foo_ != o.foo_)
                {
                    return false;
                }
            }
            if (touched[1])
            {
                if (bar_ != o.bar_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out foo_);
            }
            if (touched[1])
            {
                deserializer.Read(out bar_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Foo", out foo_);
            deserializer.Read("Bar", out bar_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(foo_);
            }
            if (touched[1])
            {
                serializer.Write(bar_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Foo", foo_);
            serializer.Write("Bar", bar_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(foo_);
            }
            if (touched[1])
            {
                length += Serializer.GetLength(bar_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Foo={0}", foo_);
            stringBuilder.AppendFormat(" Bar=\"{0}\"", bar_.Replace("\"", "\\\""));
        }

        private void Initialize()
        {
            foo_ = 0;
            bar_ = "";
        }
    }

    public class TimerFlowCaseEvent : Event
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private string value_;

        public string Value
        {
            get { return value_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                value_ = value;
            }
        }

        static TimerFlowCaseEvent()
        {
            tag = new Tag(Event.tag, typeof(TimerFlowCaseEvent), 1,
                    2);
        }

        public new static TimerFlowCaseEvent New()
        {
            return new TimerFlowCaseEvent();
        }

        public TimerFlowCaseEvent()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected TimerFlowCaseEvent(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            TimerFlowCaseEvent o = (TimerFlowCaseEvent)other;
            if (value_ != o.value_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(value_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return TimerFlowCaseEvent.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            TimerFlowCaseEvent o = (TimerFlowCaseEvent)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (value_ != o.value_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out value_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Value", out value_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(value_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Value", value_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(value_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Value=\"{0}\"", value_.Replace("\"", "\\\""));
        }

        private void Initialize()
        {
            value_ = "";
        }
    }

    public class HelloReq : Event
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private string name_;

        public string Name
        {
            get { return name_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                name_ = value;
            }
        }

        static HelloReq()
        {
            tag = new Tag(Event.tag, typeof(HelloReq), 1,
                    3);
        }

        public new static HelloReq New()
        {
            return new HelloReq();
        }

        public HelloReq()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected HelloReq(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            HelloReq o = (HelloReq)other;
            if (name_ != o.name_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(name_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return HelloReq.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            HelloReq o = (HelloReq)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (name_ != o.name_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out name_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Name", out name_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(name_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Name", name_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(name_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Name=\"{0}\"", name_.Replace("\"", "\\\""));
        }

        private void Initialize()
        {
            name_ = "";
        }
    }

    public class HelloResp : Event
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private string result_;

        public string Result
        {
            get { return result_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                result_ = value;
            }
        }

        static HelloResp()
        {
            tag = new Tag(Event.tag, typeof(HelloResp), 1,
                    4);
        }

        public new static HelloResp New()
        {
            return new HelloResp();
        }

        public HelloResp()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected HelloResp(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            HelloResp o = (HelloResp)other;
            if (result_ != o.result_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(result_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return HelloResp.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            HelloResp o = (HelloResp)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (result_ != o.result_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out result_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Result", out result_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(result_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Result", result_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(result_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Result=\"{0}\"", result_.Replace("\"", "\\\""));
        }

        private void Initialize()
        {
            result_ = "";
        }
    }

    public class NodeJoinReq : Event
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private string name_;

        public string Name
        {
            get { return name_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                name_ = value;
            }
        }

        static NodeJoinReq()
        {
            tag = new Tag(Event.tag, typeof(NodeJoinReq), 1,
                    5);
        }

        public new static NodeJoinReq New()
        {
            return new NodeJoinReq();
        }

        public NodeJoinReq()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected NodeJoinReq(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            NodeJoinReq o = (NodeJoinReq)other;
            if (name_ != o.name_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(name_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return NodeJoinReq.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            NodeJoinReq o = (NodeJoinReq)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (name_ != o.name_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out name_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Name", out name_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(name_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Name", name_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(name_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Name=\"{0}\"", name_.Replace("\"", "\\\""));
        }

        private void Initialize()
        {
            name_ = "";
        }
    }

    public class NodeJoinResp : Event
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private string name_;

        public string Name
        {
            get { return name_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                name_ = value;
            }
        }

        static NodeJoinResp()
        {
            tag = new Tag(Event.tag, typeof(NodeJoinResp), 1,
                    6);
        }

        public new static NodeJoinResp New()
        {
            return new NodeJoinResp();
        }

        public NodeJoinResp()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected NodeJoinResp(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            NodeJoinResp o = (NodeJoinResp)other;
            if (name_ != o.name_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(name_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return NodeJoinResp.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            NodeJoinResp o = (NodeJoinResp)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (name_ != o.name_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out name_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Name", out name_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(name_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Name", name_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(name_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Name=\"{0}\"", name_.Replace("\"", "\\\""));
        }

        private void Initialize()
        {
            name_ = "";
        }
    }

    public class NodeLeaveReq : Event
    {
        protected new static readonly Tag tag;

        public new static int TypeId { get { return tag.TypeId; } }

        private string name_;

        public string Name
        {
            get { return name_; }
            set
            {
                fingerprint.Touch(tag.Offset + 0);
                name_ = value;
            }
        }

        static NodeLeaveReq()
        {
            tag = new Tag(Event.tag, typeof(NodeLeaveReq), 1,
                    7);
        }

        public new static NodeLeaveReq New()
        {
            return new NodeLeaveReq();
        }

        public NodeLeaveReq()
            : base(tag.NumProps)
        {
            Initialize();
        }

        protected NodeLeaveReq(int length)
            : base(length + tag.NumProps)
        {
            Initialize();
        }

        protected override bool EqualsTo(Cell other)
        {
            if (!base.EqualsTo(other))
            {
                return false;
            }
            NodeLeaveReq o = (NodeLeaveReq)other;
            if (name_ != o.name_)
            {
                return false;
            }
            return true;
        }

        public override int GetHashCode(Fingerprint fingerprint)
        {
            var hash = new Hash(base.GetHashCode(fingerprint));
            if (fingerprint.Length <= tag.Offset)
            {
                return hash.Code;
            }
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                hash.Update(tag.Offset + 0);
                hash.Update(name_);
            }
            return hash.Code;
        }

        public override int GetTypeId()
        {
            return tag.TypeId;
        }

        public override Cell.Tag GetTypeTag() 
        {
            return tag;
        }

        public override Func<Event> GetFactoryMethod()
        {
            return NodeLeaveReq.New;
        }

        protected override bool IsEquivalent(Cell other, Fingerprint fingerprint)
        {
            if (!base.IsEquivalent(other, fingerprint))
            {
                return false;
            }
            NodeLeaveReq o = (NodeLeaveReq)other;
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                if (name_ != o.name_)
                {
                    return false;
                }
            }
            return true;
        }

        public override void Deserialize(Deserializer deserializer)
        {
            base.Deserialize(deserializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                deserializer.Read(out name_);
            }
        }

        public override void Deserialize(VerboseDeserializer deserializer)
        {
            base.Deserialize(deserializer);
            deserializer.Read("Name", out name_);
        }

        public override void Serialize(Serializer serializer)
        {
            base.Serialize(serializer);
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                serializer.Write(name_);
            }
        }

        public override void Serialize(VerboseSerializer serializer)
        {
            base.Serialize(serializer);
            serializer.Write("Name", name_);
        }

        public override int GetLength()
        {
            int length = base.GetLength();
            var touched = new Capo<bool>(fingerprint, tag.Offset);
            if (touched[0])
            {
                length += Serializer.GetLength(name_);
            }
            return length;
        }

        protected override void Describe(StringBuilder stringBuilder)
        {
            base.Describe(stringBuilder);
            stringBuilder.AppendFormat(" Name=\"{0}\"", name_.Replace("\"", "\\\""));
        }

        private void Initialize()
        {
            name_ = "";
        }
    }
}
